const express = require('express');
const router = express.Router();
const path = require('path');
const fs = require('fs');
const Photocard = require('../models/photo');
const auth = require('../middleware/auth');
const { uploadPhoto } = require('../middleware/upload'); // ‚ö†Ô∏è Import

console.log('‚úÖ Route photo.js charg√©e !');

// GET - R√©cup√©rer toutes les photocards
router.get('/', async (req, res) => {
  try {
    console.log('üì∏ R√©cup√©ration de toutes les photocards...');
    const photocards = await Photocard.find().sort({ date: -1 });
    console.log(`‚úÖ ${photocards.length} photocard(s) trouv√©e(s)`);
    res.json(photocards);
  } catch (error) {
    console.error('‚ùå Erreur GET /photo:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
});

// GET - R√©cup√©rer une photocard par ID
router.get('/:id', async (req, res) => {
  try {
    console.log(`üì∏ R√©cup√©ration de la photocard ID: ${req.params.id}`);
    const photocard = await Photocard.findById(req.params.id);
    
    if (!photocard) {
      console.log('‚ùå Photocard non trouv√©e');
      return res.status(404).json({ message: 'Photocard non trouv√©e' });
    }
    
    console.log('‚úÖ Photocard trouv√©e:', photocard.title);
    res.json(photocard);
  } catch (error) {
    console.error('‚ùå Erreur GET /photo/:id:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
});

// POST - Cr√©er une nouvelle photocard (prot√©g√© par auth)
router.post('/', auth, uploadPhoto.array('photos', 10), async (req, res) => {
  try {
    console.log('üì§ Cr√©ation d\'une nouvelle photocard...');
    console.log('Body:', req.body);
    console.log('Files:', req.files);

    if (!req.files || req.files.length === 0) {
      console.log('‚ùå Aucune photo fournie');
      return res.status(400).json({ message: 'Au moins une photo est requise' });
    }

    const photos = req.files.map(file => `/uploads/photo/${file.filename}`);
    console.log('üì∏ Photos upload√©es:', photos);

    const photocard = new Photocard({
      title: req.body.title,
      description: req.body.description,
      date: req.body.date || Date.now(),
      photos: photos
    });

    await photocard.save();
    console.log('‚úÖ Photocard cr√©√©e avec succ√®s:', photocard._id);
    res.status(201).json(photocard);
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation photocard:', error);
    res.status(500).json({ message: 'Erreur lors de la cr√©ation', error: error.message });
  }
});

// PUT - Mettre √† jour une photocard (prot√©g√© par auth)
router.put('/:id', auth, uploadPhoto.array('photos', 10), async (req, res) => {
  try {
    console.log(`üìù Mise √† jour de la photocard ID: ${req.params.id}`);
    console.log('Body:', req.body);
    console.log('Files:', req.files);

    const photocard = await Photocard.findById(req.params.id);
    
    if (!photocard) {
      console.log('‚ùå Photocard non trouv√©e');
      return res.status(404).json({ message: 'Photocard non trouv√©e' });
    }

    photocard.title = req.body.title || photocard.title;
    photocard.description = req.body.description || photocard.description;
    photocard.date = req.body.date || photocard.date;

    if (req.files && req.files.length > 0) {
      console.log('üóëÔ∏è Suppression des anciennes photos...');
      
      photocard.photos.forEach(photo => {
        const oldPath = path.join(__dirname, '..', photo);
        if (fs.existsSync(oldPath)) {
          fs.unlinkSync(oldPath);
          console.log(`‚úÖ Photo supprim√©e: ${photo}`);
        }
      });

      photocard.photos = req.files.map(file => `/uploads/photo/${file.filename}`);
      console.log('üì∏ Nouvelles photos:', photocard.photos);
    }

    await photocard.save();
    console.log('‚úÖ Photocard mise √† jour avec succ√®s');
    res.json(photocard);
  } catch (error) {
    console.error('‚ùå Erreur mise √† jour:', error);
    res.status(500).json({ message: 'Erreur lors de la mise √† jour', error: error.message });
  }
});

// DELETE - Supprimer une photocard (prot√©g√© par auth)
router.delete('/:id', auth, async (req, res) => {
  try {
    console.log(`üóëÔ∏è Suppression de la photocard ID: ${req.params.id}`);
    
    const photocard = await Photocard.findById(req.params.id);
    
    if (!photocard) {
      console.log('‚ùå Photocard non trouv√©e');
      return res.status(404).json({ message: 'Photocard non trouv√©e' });
    }

    photocard.photos.forEach(photo => {
      const filePath = path.join(__dirname, '..', photo);
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`‚úÖ Photo supprim√©e: ${photo}`);
      }
    });

    await Photocard.findByIdAndDelete(req.params.id);
    console.log('‚úÖ Photocard supprim√©e avec succ√®s');
    res.json({ message: 'Photocard supprim√©e avec succ√®s' });
  } catch (error) {
    console.error('‚ùå Erreur suppression:', error);
    res.status(500).json({ message: 'Erreur lors de la suppression', error: error.message });
  }
});

module.exports = router;